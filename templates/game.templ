package templates

import (
	"com.github.cork89/connections/models"
	"fmt"
	"strings"
)

templ GameHead() {
	<title>Play | hearteyesemoji.dev</title>
	<link id="pagecss" rel="stylesheet" href="/static/game.css"/>
}

templ GameBody(board templ.Component, debug bool) {
	<div id="board">
		@board
	</div>
	<div class="buttons">
		<button id="shuffleButton">Shuffle</button>
		<button id="deselectButton">Deselect All</button>
		<button id="checkButton" disabled>Submit</button>
		if debug {
			<button id="resetButton">Reset</button>
		}
	</div>
	<div id="debug"></div>
	<div id="gameover"></div>
	<script src="/static/game.js" type="module">
	</script>
}

func longWordHandler(word string) bool {
	startWords := strings.Split(word, " ")

	longWord := false

	for _, wd := range startWords {
		if len(wd) < 9 {
		} else {
			longWord = true
		}
	}
	return longWord
}

func getSelectionClass(word models.Word) string {
	classes := ""
	if word.Selected {
		classes += "word selected"
	} else {
		classes += "word"
	}
	if longWordHandler(word.Word) {
		classes += " long"
	}
	return classes
}

func getColor(categoryId int) models.Color {
	if categoryId == 1 {
		return models.Yellow
	} else if categoryId == 2 {
		return models.Green
	} else if categoryId == 3 {
		return models.Blue
	} else if categoryId == 4 {
		return models.Purple
	} else {
		return models.Undefined
	}
}

func getOneAwayVisibility(result models.GuessResult) string {
	if result == models.Three {
		return "oneaway"
	} else {
		return "oneaway hidden"
	}
}

templ GameBoard(selectedResponse models.SelectedResponse, gameHints models.Hints) {
	<div id="oa">
		<span class={ getOneAwayVisibility(selectedResponse.Result) }>One Away!</span>
	</div>
	<div id="connections" class="board0">
		for _, answer := range selectedResponse.GameState.Answers {
			<div class={ fmt.Sprintf("header %s", getColor(answer.Category.CategoryId)) }>
				<span><b>{ answer.Category.CategoryName }</b></span>
				<span>{ answer.Words }</span>
			</div>
		}
		for _, word := range selectedResponse.GameState.Words {
			if !word.Solved {
				<div
					id={ fmt.Sprintf("word%d", word.Id) }
					class={ getSelectionClass(word) }
				>
					<span>{ word.Word }</span>
				</div>
			}
		}
	</div>
	<div class="guess-bar">
		<div class="guesses">
			<span style="font-family:'nyt-franklin';">Mistakes Remaining:</span>
			for _ = range make([]struct{}, selectedResponse.GameState.GuessesRemaining) {
				<span class="guesses-bubble"></span>
			}
		</div>
		<svg id="hint-icon" aria-hidden="true" xmlns="http://www.w3.org/2000/svg" height="36" viewBox="-4 -4 32 32" width="36" class="game-icon" data-testid="icon-forum"><path fill="var(--color-tone-1)" d="M15.4538 15.0078C17.2881 13.8544 18.5 11.818 18.5 9.5C18.5 5.91015 15.5899 3 12 3C8.41015 3 5.5 5.91015 5.5 9.5C5.5 11.818 6.71194 13.8544 8.54624 15.0078C9.37338 15.5279 10 16.4687 10 17.6014V20H14V17.6014C14 16.4687 14.6266 15.5279 15.4538 15.0078ZM16.5184 16.7009C16.206 16.8974 16 17.2323 16 17.6014V20C16 21.1046 15.1046 22 14 22H10C8.89543 22 8 21.1046 8 20V17.6014C8 17.2323 7.79404 16.8974 7.48163 16.7009C5.08971 15.1969 3.5 12.5341 3.5 9.5C3.5 4.80558 7.30558 1 12 1C16.6944 1 20.5 4.80558 20.5 9.5C20.5 12.5341 18.9103 15.1969 16.5184 16.7009ZM8 17H16V21C16 22.1046 15.1046 23 14 23H10C8.89543 23 8 22.1046 8 21V17Z"></path></svg>
		<div class="hint-container">
			<div class="inner-hint-container">
				if ( gameHints.Revealed == false) {
					<span id="reveal-hint">Hints revealing in... 5</span>
					<span id="yellow-hint">游리 - <span style="display: none;">{ gameHints.Hints[0] }</span></span>
					<span id="green-hint">游릭 - <span style="display: none;">{ gameHints.Hints[1] }</span></span>
					<span id="blue-hint">游댯 - <span style="display: none;">{ gameHints.Hints[2] }</span></span>
					<span id="purple-hint">游릮 - <span style="display: none;">{ gameHints.Hints[3] }</span></span>
				} else {
					<span id="reveal-hint">Hints:</span>
					<span id="yellow-hint">游리 <span>{ gameHints.Hints[0] }</span></span>
					<span id="green-hint">游릭 <span>{ gameHints.Hints[1] }</span></span>
					<span id="blue-hint">游댯 <span>{ gameHints.Hints[2] }</span></span>
					<span id="purple-hint">游릮 <span>{ gameHints.Hints[3] }</span></span>
				}
			</div>
		</div>
	</div>
	<div class="gamestatus">{ string(selectedResponse.Status) }</div>
	if selectedResponse.GameOverData.IsGameOver {
		<div id="gameOverModal" class="modal">
			<div class="modal-content">
				<span class="close" id="close-modal">&times;</span>
				<span id="goMsg">{ string(selectedResponse.GameOverData.Message) }</span>
				@templ.Raw(selectedResponse.GameOverData.Guy)
			</div>
		</div>
	}
}
